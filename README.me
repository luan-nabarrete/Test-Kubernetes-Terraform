#  Deploy de Infraestrutura com Terraform + Kind + NGINX via Helm

Este projeto provisiona uma infraestrutura na AWS usando Terraform, cria uma instância EC2 com Docker e Kind, e realiza o deploy automático de um chart Helm com NGINX dentro de um cluster local.

---

##  Pré-requisitos

- [Terraform](https://www.terraform.io/downloads.html) instalado  
- [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html) instalado e configurado com credenciais válidas (`~/.aws/credentials`)  
- Bucket S3 criado e configurado corretamente no `backend.tf`  
- Variáveis ajustadas no arquivo `terraform.tfvars`:  
  - `aws_profile`  
  - `region`  
  - `meu_ip`  
  - Outras variáveis de infraestrutura, se necessário  

---

##  Aplicação da infraestrutura e deploy do NGINX

1. Clone este repositório e acesse o diretório:

   ```bash
   git clone <url-do-repo>
   cd Test-Kubernetes-Terraform
   ```

2. Inicialize o Terraform:

   ```bash
   terraform init
   ```

3. (Opcional) Verifique o plano:

   ```bash
   terraform plan
   ```

4. Aplique o plano:

   ```bash
   terraform apply
   ```

   Confirme com `yes` quando solicitado.

---

##  O que o `user_data.sh` faz?

O script localizado em `modules/ec2/user_data.sh` será executado automaticamente pela EC2 provisionada e:

1. Instala Docker, Kind, kubectl e Helm  
2. Cria um cluster Kubernetes local com Kind  
3. Aplica automaticamente o Helm chart localizado em `helm/` com NGINX  

>  **Importante:** esse processo leva aproximadamente 5 minutos após a inicialização da EC2. Aguarde antes de acessar o serviço.

---

## Teste de acesso ao NGINX

Ao final do `terraform apply`, os seguintes outputs serão exibidos:

```
Apply complete! Resources: X added, 0 changed, 0 destroyed.

Outputs:

ec2_public_ip = "192.163.10.51"
ec2_public_ip_port = "192.163.10.51:30080"
```

Acesse via navegador:

```
http://192.163.10.51:30080
```

Ou via terminal:

```bash
curl 192.163.10.51:30080
```

---

## Acesso SSH à EC2

Uma chave SSH chamada `server-key.pem` foi gerada automaticamente e está salva em `modules/ec2/`.

Comando para acesso:

```bash
ssh -i modules/ec2/server-key.pem ec2-user@[ec2_public_ip]
```

Exemplo:

```bash
ssh -i modules/ec2/server-key.pem ec2-user@192.163.10.51
```

---

## Estrutura do Projeto

```text
.
├── backend.tf
├── main.tf
├── provider.tf
├── terraform.tfvars
├── variables.tf
├── README.md
├── helm/
│   ├── Chart.yaml
│   ├── values.yaml
│   ├── kind-app-nginx-cluster.yaml
│   └── templates/
│       ├── deployment.yaml
│       └── service.yaml
└── modules/
    ├── ec2/
    │   ├── main.tf
    │   ├── outputs.tf
    │   ├── server-key.pem
    │   ├── user_data.sh
    │   └── variables.tf
    ├── security_groups/
    │   ├── main.tf
    │   ├── outputs.tf
    │   └── variables.tf
    └── vpc/
        ├── main.tf
        ├── outputs.tf
        └── variables.tf
```

---